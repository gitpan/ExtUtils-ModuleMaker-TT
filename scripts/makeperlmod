#!/usr/bin/perl -w

$VERSION = "0.81";

use strict;
use Getopt::Long;
use Pod::Usage;
use Config::General;
use File::Spec::Functions;
use File::Basename;
use Data::Dumper;
use ExtUtils::ModuleMaker;
use Cwd;

# Command line option handling:
# Put option definitions in @opt_def as <name spec>[arg spec]
# name spec is 'name' or 'name|alias'  (results will be in $opt{name})
# arg spec is:
#       blank (boolean), ! (negatable), + (incremental), =<type> (required), 
#       :<type> (optional), :<number> (optional, w/ integer default),
# types are "s" (string), "i" (int), "o" (int/octal/hex), "f" (real float)
# can append a "@" or "%" to store multiples in a list or hash
# put option defaults in %opts

my @opt_def = ('help|h|?',
               'config|c:s',
               'defaults|d:s',
               'templates|t:s',
               'newdist|n:s',
               'module|m:s',
               'subroutine|s:s',
               'extra|e:s@',
               'version|V',
);

my %opt = ('help' => 0);

GetOptions(\%opt, @opt_def) or pod2usage(2);
pod2usage(1) if $opt{help};

my $cmd_opt_count = grep(/defaults|templates|newdist|module|subroutine|version/, 
                         keys %opt); 
unless ( $cmd_opt_count == 1  ) {
    pod2usage(1);
}

# Load config file if specified or search for any default automagically 
$opt{config} ||= find_file();
my $config = Config::General->new( -ConfigFile => $opt{config}, -AutoTrue => 1 );

# Initialize

my $mmtt;    
# Code goes here

SWITCH: for(1) {
    
    $opt{newdist} && do {
        $mmtt = ExtUtils::ModuleMaker->new( 
            $config->getall, 
            COMPACT => 1,
            ALT_BUILD => 'ExtUtils::ModuleMaker::TT',
            NAME => $opt{newdist},
        ) or die "Couldn't create ExtUtils::ModuleMaker::TT object";
        my $dist_dir = $mmtt->complete_build( NAME => $opt{newdist} );
        my $cwd = cwd();
        for ( @{ $opt{extra} } ) {
            $mmtt->build_single_pm($_);
        }
        last;
    };

    $opt{module} && do {
        $mmtt = ExtUtils::ModuleMaker->new( 
            $config->getall, 
            COMPACT => 1,
            ALT_BUILD => 'ExtUtils::ModuleMaker::TT',
            NAME => 'bogus',
        ) or die "Couldn't create ExtUtils::ModuleMaker::TT object";
        for ( $opt{module}, @{ $opt{extra} } ) {
            $mmtt->build_single_pm($_);
        }
        last;
    };

    $opt{subroutine} && do {
        $mmtt = ExtUtils::ModuleMaker->new( 
            $config->getall, 
            COMPACT => 1,
            ALT_BUILD => 'ExtUtils::ModuleMaker::TT',
            NAME => 'bogus',
        ) or die "Couldn't create ExtUtils::ModuleMaker::TT object";
        for ( $opt{subroutine}, @{ $opt{extra} } ) {
            print $mmtt->build_single_method($_) . "\n";
        }
        last;
    };

    $opt{defaults} && do {
        $mmtt = ExtUtils::ModuleMaker->new( 
            $config->getall, 
            COMPACT => 1,
            ALT_BUILD => 'ExtUtils::ModuleMaker::TT',
            NAME => 'bogus',
        ) or die "Couldn't create ExtUtils::ModuleMaker::TT object";
        my $defaults = $mmtt->default_values();
        $config->save_file($opt{defaults}, $defaults);
        last;
    };

    $opt{templates} && do {
        $mmtt = ExtUtils::ModuleMaker->new( 
            $config->getall, 
            COMPACT => 1,
            ALT_BUILD => 'ExtUtils::ModuleMaker::TT',
            NAME => 'bogus',
        ) or die "Couldn't create ExtUtils::ModuleMaker::TT object";
        $mmtt->create_template_directory($opt{templates});
        last;
    };
    
    $opt{version} && do {
        print "$0 version $main::VERSION\n";
        print "Current config hash:\n" . Data::Dumper->Dump ( [{$config->getall}], [qw(config)]);
        last;
    }
} 

# find_file copied and modified from a version found in Config::Auto
sub find_file {
    my $x;
    my $whoami = basename($0);
    my $bindir = dirname($0);
    $whoami =~ s/\.pl$//;
    for ("${whoami}config", ".${whoami}config", 
         "${whoami}.config", ".${whoami}.config",
         "${whoami}conf", ".${whoami}conf",
         "${whoami}.conf", ".${whoami}.conf",
         "${whoami}rc", ".${whoami}rc") {
        return $_           if -r $_;
        return $x           if -r ($x=catfile($bindir,$_));
        return $x           if -r ($x=catfile($ENV{HOME},$_));
        return $x            if -r ($x=catfile(rootdir(),"etc",$_));
    }
    return undef;
}

exit;

__END__
# Docs for POD and pod2usage go here.  Put usage/options in SYNOPSIS

=head1 NAME

makeperlmod - Perl program for creating new modules with ExtUtils::ModuleMaker::TT

=head1 SYNOPSIS
  
 makeperlmod [ -c config_file ] mode_option [argument] [-e extra_info ]

=head1 DESCRIPTION

This program is a front-end to ExtUtils::ModuleMaker::TT.  It 
supports:

I<Note: ExtUtils::ModuleMaker has changed substantially in recent releases.
This version of modulemaker has been updated to be minimally 
compatible with these changes, but has not yet been completely overhauled to
reflect new capabilities in ExtUtils::ModuleMaker (e.g. configuration file 
support) and unwind some tightly-coupled functions. Documentation is 
likewise lagging slightly.  Please report any bugs 
you may find.  I am working closely with the maintainer of 
ExtUtils::ModuleMaker to improve the integration of these two modules.>

I<Note: Template variables have changed in a way that may break existing
templates.>

=over

=item *

reading/writing a configuration file

=item *

generating a directory of default templates

=item *

building new distribution directories

=item *

creating new .pm and .t files within an existing distribution
directory

=item *

printing a skeleton method to STDOUT

=back

Configuration options are read from ~/.makeperlmod.config or
other standard configuration file locations.  Automatic config
finding subroutine taken and modified from Config::Auto -- see that
module or the makeperlmod source for alternative config file locations.
(E.g., ~/.makeperlmod.conf)
    
=head1 OPTIONS

=head2 Mode Options

One of the following mode options is required and only one may be used.

=over
    
=item -d FILE or --defaults FILE

Writes out default options from ExtUtils::ModuleMaker to the given file
in "Apache" config format. Use to create a new base for a custom config
file.

=item -t DIRECTORY or --templates DIRECTORY

Creates DIRECTORY if it doesn't exist and write all default templates as
separate files in that directory for subsequent user customization (Add
a TEMPLATE_DIR option with DIRECTORY to your custom config file to use 
this as a custom template directory)

=item -n MODULE::NAME or --newdist MODULE::NAME

Creates a skeleton distribution for MODULE::NAME.  Directory name will be 
determined by the COMPACT option set in the config file

=item -m MODULE::NAME or --module MODULE::NAME

Creates a new .pm and corresponding .t file in an existing distribution.  Must
be called from within an existing distribution tree, though not necessarily
at the top level.  I.e., can be called from lib/Sample/Module and will still
place files correctly

=item -s METHOD_NAME or --subroutine METHOD_NAME

Prints to STDOUT a skeleton for a single method.  Most useful when called
from within an editor to insert code.  See EXAMPLES.

=item -V or --version

Prints version information and current configuration settings (either default or 
from a -c option)

=item -h or -? or --help

Prints usage information

=back

=head2 Additional Options

=over

=item -c or --config

Alternate configuration file to use in place of the default one

=item -e EXTRA or --extra EXTRA

Defines an additional module (for -n and -m modes) or method (for -s mode) to
be created.  May be used more than once to define multiple extras

=back

=head1 EXAMPLES

Create a custom configuration file

    makeperlmod -d ~/.makeperlmod.config

Create a custom template directory

    makeperlmod -t ~/.makeperlmod.templates
 
Edit the custom configuration file.  Set AUTHOR and other defaults as
desired.  (Setting COMPACT to 1 is recommended.)  Set TEMPLATE_DIR to
a templates directory (e.g. ~/.makeperlmod.templates ) to use your
own custom templates in place of the defaults.

Create a new distribution

    makeperlmod -n Sample::Module::Foo

Create a new distribution with an extra module

    makeperlmod -n Sample::Module::Foo -e Sample::Module::Bar 

From within the new distribution, add another .pm

    cd Sample-Module-Foo/lib/Sample/Module
    makeperlmod -m Sample::Module::Baz
 
From within an editor, insert a new subroutine skeleton.  E.g. from within
vi,

    :r! makeperlmod -s sample_method

Or insert several subroutines

    :r! makeperlmod -s sample_method -e method2 -e method3
 
=head1 BUGS AND SUPPORT

See L<ExtUtils::ModuleMaker::TT> for more details.

=head1 AUTHOR

 David A. Golden (DAGOLDEN)
 david@dagolden.com
 http://dagolden.com/
 
=head1 COPYRIGHT AND LICENSE

Copyright (c) 2004 by David A. Golden

This script is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. 

=cut
